// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Preparation
    Not(in=instruction[15], out=C);
    Mux16(a=instruction, b=false, sel=C, out[4]=D, out[5]=A, out[12]=AM);

    // First Mux16
    Mux16(a=lastOut, b=instruction, sel=C, out=mux1);

    // A Register
    Or(a=A, b=C, out=CA);
    ARegister(in=mux1, load=CA, out=AReg, out[0..14]=addressM);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Second Mux16
    And(a=AM, b=instruction[15], out=AMC);
    Mux16(a=AReg, b=inM, sel=AMC, out=mux2);

    // D register
    And(a=D, b=instruction[15], out=DC);
    DRegister(in=lastOut, load=DC, out=DReg);

    // ALU
    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=DReg, y=mux2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=lastOut, zr=zr, ng=ng);

    // PC
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=nl);
    And(a=instruction[15], b=zr, out=zjmp0);
    And(a=zjmp0, b=instruction[1], out=zjmp);
    And(a=instruction[15], b=ng, out=ngjmp0);
    And(a=ngjmp0, b=instruction[2], out=ngjmp);
    And(a=instruction[15], b=nl, out=nljmp0);
    And(a=nljmp0, b=instruction[0], out=nljmp);
    Or(a=zjmp, b=ngjmp, out=jmp0);
    Or(a=jmp0, b=nljmp, out=jmp);
    Not(in=jmp, out=Njmp);
    PC(in=AReg, load=jmp, inc=Njmp, reset=reset, out[0..14]=pc);
}